define([
    'dataSourceType',
    'youTubeV2API',
    'youTubeV3API'
], function (DataSourceType, YouTubeV2API, YouTubeV3API) {
    'use strict';

    var DataSource = Backbone.Model.extend({
        
        defaults: {
            type: DataSourceType.NONE,
            //  The videoId, playlistId, channelId etc..
            sourceId: '',
            url: '',
            title: ''
        },
        
        initialize: function (options) {

            if (options && options.urlToParse) {
                var parsedDataSourceInformation = this.parseUrlForDataSourceInformation(options.urlToParse);
                this.set('type', parsedDataSourceInformation.dataSourceType);
                this.set('sourceId', parsedDataSourceInformation.dataSourceId);

                delete options.urlToParse;
            }

            this.setUrl();
            this.on('change:type', this.setUrl);
        },
        
        setUrl: function () {

            //  Craft an appropriate URL based off of the dataSource type and ID
            var url = 'https://gdata.youtube.com/feeds/api/';

            switch (this.get('type')) {
                case DataSourceType.YOUTUBE_CHANNEL:
                    url += 'users/' + this.get('sourceId') + '/uploads';
                    break;
                case DataSourceType.YOUTUBE_FAVORITES:
                    url += 'users/' + this.get('sourceId') + '/favorites';
                    break;
                case DataSourceType.YOUTUBE_PLAYLIST:
                    url += 'playlists/' + this.get('sourceId');
                    break;
                default:
                    //  Other data source types don't have a URL because they don't need loading.
                    url = '';
            }

            this.set('url', url);

        },
        
        //  These dataSourceTypes require using YouTube V3 API to retrieve their information.
        isV3: function () {

            var type = this.get('type');

            return type === DataSourceType.YOUTUBE_AUTOGENERATED;
        },

        //  These dataSourceTypes require going out to a server and collecting a list of information in order to be created.
        needsLoading: function () {

            var type = this.get('type');

            return type === DataSourceType.YOUTUBE_CHANNEL || type === DataSourceType.YOUTUBE_PLAYLIST ||
                type === DataSourceType.YOUTUBE_FAVORITES || type === DataSourceType.YOUTUBE_AUTOGENERATED;
        },

        parseUrlForDataSourceInformation: function (urlToParse) {
            
            var dataSourceType = DataSourceType.NONE;
            var dataSourceId = '';

            var dataSourceOptions = [{
                identifiers: ['list=PL', 'p=PL'],
                dataSourceType: DataSourceType.YOUTUBE_PLAYLIST
            }, {
                identifiers: ['list=FL', 'p=FL'],
                dataSourceType: DataSourceType.YOUTUBE_FAVORITES
            }, {
                identifiers: ['list=AL', 'p=AL'],
                dataSourceType: DataSourceType.YOUTUBE_AUTOGENERATED
            }, {
                identifiers: ['/user/', '/channel/', 'list=UU', 'p=UU'],
                dataSourceType: DataSourceType.YOUTUBE_CHANNEL
            }, {
                identifiers: ['streamus:'],
                dataSourceType: DataSourceType.SHARED_PLAYLIST
            }];

            var tryGetIdFromUrl = function (url, identifier) {
                var urlTokens = url.split(identifier);

                var parsedDataSourceId = '';

                if (urlTokens.length > 1) {
                    parsedDataSourceId = url.split(identifier)[1];

                    var ampersandPosition = parsedDataSourceId.indexOf('&');
                    if (ampersandPosition !== -1) {
                        parsedDataSourceId = parsedDataSourceId.substring(0, ampersandPosition);
                    }

                    //  Starting in v3 YouTube API wants the full identifier at the front of the dataSource.
                    if (identifier === 'list=AL' || identifier === 'p=AL') {
                        parsedDataSourceId = 'AL' + parsedDataSourceId;
                    }
                }

                return parsedDataSourceId;
            };

            //  Find whichever option works.
            _.each(dataSourceOptions, function (dataSourceOption) {

                var validIdentifier = _.find(dataSourceOption.identifiers, function (identifier) {
                    var parsedDataSourceId = tryGetIdFromUrl(urlToParse, identifier);
                    return parsedDataSourceId !== '';
                });

                if (validIdentifier !== undefined) {
                    dataSourceId = tryGetIdFromUrl(urlToParse, validIdentifier);
                    dataSourceType = dataSourceOption.dataSourceType;
                }

            });

            return {
                dataSourceType: dataSourceType,
                dataSourceId: dataSourceId
            };
        },
        
        //  Expects options: { success: function, error: function }
        getTitle: function (options) {
            //  Support calling without paramaters just in case.
            options = $.extend({}, { success: function () { }, error: function () { } }, options);
            
            //  If the title has already been fetched from the URL -- return the cached one.
            if (this.get('title') !== '') {
                options.success(this.get('title'));
                return;
            }

            var self = this;
            switch (this.get('type')) {
                case DataSourceType.YOUTUBE_PLAYLIST:

                    YouTubeV2API.getPlaylistTitle({
                        playlistId: this.get('sourceId'),
                        success: function (youTubePlaylistTitle) {
                            self.set('title', youTubePlaylistTitle);
                            options.success(youTubePlaylistTitle);
                        },
                        error: options.error
                    });

                    break;
                case DataSourceType.YOUTUBE_FAVORITES:
                case DataSourceType.YOUTUBE_CHANNEL:

                    YouTubeV2API.getChannelName({
                        channelId: this.get('sourceId'),
                        success: function (channelName) {
                            self.set('title', channelName);
                            options.success(channelName);
                        },
                        error: options.error
                    });

                    break;
                    //  TODO: Need to support getting shared playlist information.
                    //case DataSource.SHARED_PLAYLIST:
                    //    self.model.addPlaylistByDataSource('', dataSource);
                    //    break;
                case DataSourceType.YOUTUBE_AUTOGENERATED:

                    //  TODO: error isn't uspported in v3 stuff yet
                    YouTubeV3API.getAutoGeneratedPlaylistTitle(this.get('sourceId'), function (autoGeneratedPlaylistTitle) {
                        self.set('title', autoGeneratedPlaylistTitle);
                        options.success(autoGeneratedPlaylistTitle);
                    });

                    break;
                default:
                    console.error("Unhandled dataSource type:", this.get('type'));
                    options.error();
            }
        }

    });

    return DataSource;
});