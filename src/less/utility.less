@import "colorPallete";

//  Width is set as 385px / 640px, TODO: follow golden ratio more closely
@largeColumnWidth: 60.15625%;
//  Width is set as 255px / 640px, TODO: follow golden ratio more closely
@smallColumnWidth: 39.84375%;
@colorTransitionTime: .15s;

.full {
    width: 100%;
    height: 100%;
}

.flex-column {
    display: flex;
    flex-direction: column;
}

.flex-full {
    flex: 1;
}

.fixed-full-overlay {
    bottom: 0;
    left: 0;
    position: fixed;
    right: 0;
    top: 0;
    z-index: 1;
}

.flex-row {
    display: flex;
    align-items: center;
}

.clickable {
    cursor: pointer;
}

.lowercase {
    text-transform: lowercase;
}

.hidden {
    /* Use important to ensure that hidden always takes precedence -- even if JavaScript tries to mess with it. Hidden is hidden! */
    display: none !important;
}

.invalid {
    background-color: @invalidRed;
}

.valid {
    background-color: @validGreen;   
}

.inset-horizontal {
    margin-left: 10px;
    margin-right: 10px;
}

.inset-vertical {
    margin-top: 10px;
    margin-bottom: 10px;
}

.flex-justify-center {
    display: flex;
    justify-content: center;
    flex: 1;
}

.absolute-center {
    position: absolute;
    margin: auto;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
}

.text-center {
    margin-left: auto;
    margin-right: auto;
}

/* it's important to use a disabled class and not the disabled attr because tooltips on disabled icons don't work well */
.disabled {
    color: @mediumLightGray !important;
    cursor: default !important;

    * {
        color: @mediumLightGray !important;
        cursor: default !important;
    }
}

.text {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.text-secondary {
    color: @mediumDarkGray;
}

.link {
    color: @baseBlue;

    &:hover {
        color: @darkBaseBlue;
    }
}

.muted {
    color: @alizarin;

    &:hover {
        color: @darkAlizarin;
    }
}

.grid-column {
    height: 100%;
    display: inline-block;
}

@transition-timingFunction-snap: cubic-bezier(0, 1, 0.5, 1);

/* TODO: This is bad practice. I don't think I ever want a region to be absolutely positioned -- only its contents.
   Additionally, I'm setting it to display: none because when it has nothing inside of it it shouldn't be overlapping visible content. */
.region.overlay {
    position: absolute;

    &:empty {
        display: none;
    }
}